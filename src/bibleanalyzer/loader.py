#
# Copyright (c) 2021 by Kristoffer Paulsson <kristoffer.paulsson@talenten.se>.
#
# Permission to use, copy, modify, and/or distribute this software for any purpose with
# or without fee is hereby granted, provided that the above copyright notice and this
# permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO
# THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
# IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
#     https://opensource.org/licenses/ISC
#
# SPDX-License-Identifier: ISC
#
# Contributors:
#     Kristoffer Paulsson - initial implementation
#
"""Corpus loader. Loads and parses UTF-8 corpus files as generated by the BibleWorks 10 Report Generator,
saved as RTF and converted to TXT by TextEdit for macOS."""
import re
from pathlib import Path

from bibleanalyzer.logging import Logger

VERSE_REGEX = r"""(?P<translation>\S+) (?P<book>\S+) (?P<chapter>\d+)\:(?P<verse>\d+) (?P<text>\S.*)"""
HLINE_REGEX = r"""^\.*\n(_+)\n.*$"""
GREEK_REGEX = r"""^(?:\d+)\. (?:\S+) (?:\S+) - (?:\S+) (?:\S+).*$"""
WHOLE_REGEX = r"""^(?:(?P<translation>\S+) (?P<book>\S+) (?P<chapter>\d+)\:(?P<verse>\d+) (?P<text>\S.*))|(?P<line>_+)|(?:(?P<index>\d+)\. (?P<word>\S+) (?P<lexeme>\S+) - (?P<grammar>\S+) (?P<inflexion>[\S ]+))$"""

TOKEN_REGEX = r"""([·.,;:]|[^[·\.,;: \(\)\[\]]\s]+)"""


class TextLoader:

    def __init__(self, logger: Logger):
        self._logger = logger.getChild("loader")
        self._logger.setLevel(logger.level)

    def parse(self, filename):
        self._logger.info("Load corpus: {}".format(filename.name))
        corpus = ""
        with filename.open("r") as doc:
            for line in doc:
                result = re.match(WHOLE_REGEX, line)
                if result:
                    print(result)
                    if result["translation"] == "NA28":
                        corpus += result["text"] + "\n"
        return corpus

    def __str__(self):
        return str(self._meta)
